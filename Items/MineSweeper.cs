using RandBombs.Configs;
using RandBombs.Systems;
using System.Linq;
using Terraria;
using Terraria.DataStructures;
using Terraria.ID;
using Terraria.ModLoader;

namespace RandBombs.Items
{
    public class MineSweeper : ModItem
    {
        public override void SetDefaults()
        {
            Item.width = 20;
            Item.height = 24;
            Item.useStyle = ItemUseStyleID.HoldUp;
            Item.autoReuse = false;
            Item.useTime = 30;
            Item.useAnimation = 30;
            Item.value = Item.buyPrice(0, 10, 0, 0);
        }


        //TODO: Update this to be less laggy, and remake the code to be more readable. Make a flow chart or smth
        public override bool? UseItem(Player player)
        {
            //make sure this doesn't run more than once
            if (Main.netMode != NetmodeID.MultiplayerClient)
            {
                ref Point16[] BombLocations = ref ModContent.GetInstance<Explosives>().BombLocations; //get the Point16[] of bombs
                ref bool BombsGenerated = ref ModContent.GetInstance<Explosives>().BombsGenerated; //get whether or not bombs are present in the world

                if (player.altFunctionUse == 2)
                {
                    if (BombsGenerated)
                    {
                        if (BombLocations.Length >= 250000) //If there are more than 250,000 mine slots; don't generate more
                        {
                            Main.NewText(
                                """
                            There are too many mines existing in this world
                            If you think you need more for whatever reason, you can come and talk to me @mangochicken_ on discord
                            """);
                            return true;
                        }

                        int i = BombLocations.Length; //get the amount of mine slots
                        int b = 0;
                        BombLocations = new Point16[BombLocations.Length + 500]; //add 500 to the mine slots
                        for (; i < BombLocations.Length; i++) //for loop runs 500 times, until i is equal to the number of mine slots
                        {
                            for (int k = 0; k < 50; k++) //give it 50 tries to generate a point for a mine
                            {
                                Point16 point = new(Main.rand.Next(0, Main.maxTilesX), Main.rand.Next(0, Main.maxTilesY));
                                if (BombLocations.Contains(point) || Main.tile[point.ToPoint()].HasTile)
                                {
                                    continue;
                                }
                                else
                                {
                                    BombLocations[i] = point;
                                    b++;
                                    break;
                                }
                            }
                        }
                        Main.NewText($"You seem to notice {b} more active mines in the world"); //flavour text to tell the user what happens
                    }
                    else { Main.NewTextMultiline("Nothing seems to have happened...\n(try using the other mouse key)"); }
                }
                else
                {
                    if (BombsGenerated) //check if there are actually any mines
                    {
                        int b = 0; //number of bombs generated by this use of the item

                        for (int i = 0; i < BombLocations.Length; i++) //increment through the array
                        {
                            if (BombLocations[i].Equals(Point16.NegativeOne) || BombLocations[i].Equals(Point16.Zero))
                            {
                                for (int k = 0; k < 500; k++) //500 chances for each point to be valid, just an arbitrary number chosen to limit the for loop
                                {
                                    Point16 point = new(Main.rand.Next(0, Main.maxTilesX), Main.rand.Next(0, Main.maxTilesY));
                                    if (BombLocations.Contains(point) || Main.tile[point.ToPoint()].HasTile)
                                    {
                                        continue;
                                    }
                                    else
                                    {
                                        BombLocations[i] = point;
                                        b++;
                                        break;
                                    }
                                }
                            }

                            if (b >= 500) //break after 500 bombs generated
                            {
                                break;
                            }

                            continue;
                        }

                        Main.NewText($"{b} more mines have activated");
                    }
                    else //generate inital mines if they haven't already been generated
                    {
                        BombLocations = new Point16[ModContent.GetInstance<BombConfigs>().NumberOfBombs]; //set array length to config num

                        for (int i = 0; i < BombLocations.Length; i++) //iterate through the array
                        {
                            Point16 point = new(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next(0, Main.maxTilesY));
                            if (BombLocations.Contains(point) || !Main.tile[point.ToPoint()].HasTile)
                            {
                                BombLocations[i] = Point16.NegativeOne; //set the spot outside of the world borders, so it won't cause any issues
                            }
                            else
                            {
                                BombLocations[i] = point;
                            }
                        }

                        BombsGenerated = true; //set the flage 
                        Main.NewText($"generated {BombLocations.Length} initial mines\n(may have appeared in builds, be careful)"); //warn the player about explosions
                    }
                }
            }
            return true;
        }

        public override bool AltFunctionUse(Player player)
        {
            return true;
        } //enables right click usage
    }
}
